{"pages":[{"title":"关于","date":"2019-12-21T18:48:57.712Z","updated":"2019-12-21T17:57:16.773Z","comments":false,"path":"about/index.html","permalink":"https://cejasonwoo.github.io/about/index.html","excerpt":"","text":"个人详细介绍"},{"title":"categories","date":"2017-10-23T07:35:48.000Z","updated":"2019-12-21T18:18:29.737Z","comments":false,"path":"categories/index.html","permalink":"https://cejasonwoo.github.io/categories/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2019-12-21T18:49:18.053Z","updated":"2019-12-21T17:57:30.959Z","comments":true,"path":"links/index.html","permalink":"https://cejasonwoo.github.io/links/index.html","excerpt":"","text":""},{"title":"Repositories","date":"2019-12-22T07:09:20.271Z","updated":"2019-12-21T17:59:53.322Z","comments":false,"path":"repository/index.html","permalink":"https://cejasonwoo.github.io/repository/index.html","excerpt":"","text":""},{"title":"tags","date":"2017-10-23T07:34:51.000Z","updated":"2019-12-21T18:18:34.127Z","comments":false,"path":"tags/index.html","permalink":"https://cejasonwoo.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"","slug":"2019-12-22","date":"2019-12-22T07:07:01.082Z","updated":"2019-12-22T07:12:07.779Z","comments":true,"path":"2019/12/22/2019-12-22/","link":"","permalink":"https://cejasonwoo.github.io/2019/12/22/2019-12-22/","excerpt":"","text":"#nihamawohenhaodjiahoa caishzhen de hao adajihaocaihi zhne dzhesiwiesnemzhehias","categories":[],"tags":[]},{"title":"d3-test","slug":"d3-test","date":"2019-12-21T13:22:56.000Z","updated":"2019-12-21T16:09:40.311Z","comments":true,"path":"2019/12/21/d3-test/","link":"","permalink":"https://cejasonwoo.github.io/2019/12/21/d3-test/","excerpt":"","text":"Force Layout Repulsion这里是文章自定义内容，你需要进入该文章才能看到。.chart div{font:10px sans-serif;background-color:#4682b4;text-align:right;padding:3px;margin:1px;color:#fff}svg.main{display:block;margin:0 auto;margin-top:30px}function collide(t){var e=t.radius+16,r=t.x-e,n=t.x+e,o=t.y-e,i=t.y+e;return function(e,a,d,c,s){if(e.point&&e.point!==t){var u=t.x-e.point.x,l=t.y-e.point.y,f=Math.sqrt(u*u+l*l),h=t.radius+e.point.radius;fn||ci||s","categories":[],"tags":[]},{"title":"bit","slug":"bit","date":"2019-01-14T15:53:05.000Z","updated":"2019-01-14T15:53:05.919Z","comments":true,"path":"2019/01/14/bit/","link":"","permalink":"https://cejasonwoo.github.io/2019/01/14/bit/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"Git常见问题","slug":"opt-git","date":"2017-10-23T11:54:10.000Z","updated":"2019-12-21T13:12:26.353Z","comments":true,"path":"2017/10/23/opt-git/","link":"","permalink":"https://cejasonwoo.github.io/2017/10/23/opt-git/","excerpt":"","text":"git常见问题开发一般的开发流程如下，git clone代码后，在自己的本地分支上开发，避免主分支开发上的混乱新建本地分支git checkout -b dev推送本地分支到远程git push origin origin/dev切换当前分支到mastergit checkout master将dev分支合并到mastergit merge dev冲突同步代码前应尽量避免冲突备份当前工作区(前提是,没有git commit,可以git add)git stash或者 加入注释以便以后好找回未提交的代码git stash save &#39;正在做冒泡功能,保存一下2016-06-30....&#39;更新代码git pull还原工作区git stash pop撤销1234术语：工作区 是你的本地开发环境缓存区 是你add的本地仓库引用 是你commit的本地分支（如master）改提交说明：$ git reset --soft HEAD^工作区和暂存区不改变，但是引用向前回退一次。当对最新的提交说明或者提交的更改不满意时，撤销最新的提交以便重新提交。改提交文件内容：$ git reset --mixed HEAD^工作区不改变，但是暂存区会回退到上一次提交之前，引用也会回退一次。慎用！！！工作区所有未commit改动永久丢失！！！$ git reset --hard HEAD^彻底撤销最近的提交。引用回退到前一次，而且工作区和暂存区都会回退到上一次提交的状态。自上一次以来的提交全部丢失。慎用！！！工作区相应的文件未commit改动永久丢失。$ git checkout -- filename用暂存区中filename文件来覆盖工作区中的filename文件。相当于取消自上次执行git add filename以来（如果执行过）的本地修改。慎用！！！工作区相应的文件未push改动永久丢失。$ git checkout branch -- filename维持HEAD的指向不变。用branch所指向的提交中filename替换暂存区和工作区中相应的文件。注意会将暂存区和工作区中的filename文件直接覆盖。查看操作记录git relog查看提交记录git log","categories":[{"name":"运维","slug":"运维","permalink":"https://cejasonwoo.github.io/categories/运维/"}],"tags":[{"name":"Mac","slug":"Mac","permalink":"https://cejasonwoo.github.io/tags/Mac/"}]},{"title":"gitbook","slug":"opt-gitbook","date":"2017-10-23T11:46:35.000Z","updated":"2019-12-21T13:12:31.716Z","comments":true,"path":"2017/10/23/opt-gitbook/","link":"","permalink":"https://cejasonwoo.github.io/2017/10/23/opt-gitbook/","excerpt":"","text":"from 在自己的服务器上安装GitBook http://blog.csdn.net/ys743276112/article/details/45130831from 官方文档 https://github.com/GitbookIO/gitbook/blob/master/docs/setup.mdLocal Installation$ npm install gitbook-cli -g$ gitbook init编译md为html$ gitbook build启动服务$ gitbook serve &amp;同时部署多个gitbook如果要启动另一部电子书服务的话， 就需要同时修改web端口和监控进程端口， 类似这样:gitbook serve –lrport 35288 –port 4001 /path2/your_another_doc_dir/编辑1.先下载文档 git clone https://git.coding.net/Muscle/locals-document.git2.用gitbookEidtor引入3.在gitbookEidtor选择你要编辑的分支，修改后记得save和push插件使用from http://gitbook.zhangjikai.com/plugins.html要安装gitbook installJenkins自动集成from http://www.linuxidc.com/Linux/2016-05/131136.htm12345678910登陆jenkins http://192.168.1.2:8082左上角新建 填入名称 比如叫做 GitBook_测试选择 构建一个自由风格的软件项目 点击OK 进入详细设置源码管理 选择gitRepository URL 填入 项目url 比如 http://192.168.1.2:8081/zhuangqiubin/Books_ceshi.gitCredentials 处点击ADD 填入你的gitlab用户名和密码 确定添加后 把none换成你刚刚添加的用户名密码最后 Add Repository 确定","categories":[{"name":"运维","slug":"运维","permalink":"https://cejasonwoo.github.io/categories/运维/"}],"tags":[{"name":"Mac","slug":"Mac","permalink":"https://cejasonwoo.github.io/tags/Mac/"},{"name":"Linux","slug":"Linux","permalink":"https://cejasonwoo.github.io/tags/Linux/"}]},{"title":"js代码记录本","slug":"js-mark","date":"2017-10-23T11:45:17.000Z","updated":"2019-12-22T07:44:41.308Z","comments":true,"path":"2017/10/23/js-mark/","link":"","permalink":"https://cejasonwoo.github.io/2017/10/23/js-mark/","excerpt":"","text":"123术语:Immutable 不可改变的，返回新对象Mutable 修改原对象字符串取字符串右边4位[Immutable]&#39;123456&#39;.slice(-4) // =&gt; 3456数组合并操作[Immutable]返回newArray组合两个或两个以上的数组array1.concat([item1[, item2[, . . . [, itemN]]]])[Mutable]push技巧将新数组追加到一个数组Array.prototype.push.apply(arrayObj, [item1])移除操作[Immutable]返回newArray返回一个数组中的一部分。arrayObj.slice(start, [end])[Mutable]从一个数组中移除元素arrayObj.splice(start, deleteCount, [item1[, item2[, . . . [,itemN]]]])从数组中移除最后一个元素并返回该元素。arrayObj.pop( )从数组中移除第一个元素并将返回该元素arrayObj.shift( )插入操作[Mutable]将新元素追加到一个数组arrayObj.push([item1 [item2 [. . . [itemN ]]]])用法：my_array.push (5, 6, 7);在数组的开头插入新元素。arrayObj.unshift([item1[, item2 [, . . . [, itemN]]]])找出数组中最大元素Math.max.apply(this, targetArray)","categories":[{"name":"前端","slug":"前端","permalink":"https://cejasonwoo.github.io/categories/前端/"}],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://cejasonwoo.github.io/tags/JavaScript/"}]},{"title":"Java8 Stream 常用代码","slug":"java-8","date":"2017-10-23T11:44:43.000Z","updated":"2019-12-21T18:12:00.957Z","comments":true,"path":"2017/10/23/java-8/","link":"","permalink":"https://cejasonwoo.github.io/2017/10/23/java-8/","excerpt":"","text":"Stream基于java8的流写业务逻辑，可以用精简的代码实现复杂的业务逻辑。取代以前复杂的多重for循环代码。:: 关键字为了使得代码更为直观123num -&gt; Integer::valueOf;等价于Integer.valueOf(num)过滤首先使用for循环方案。123456789public List&lt;Item&gt; getItems() &#123;List&lt;Items&gt; result = new ArrayList&lt;&gt;();for (Items item : items) &#123;if (item.getTag().equals(\"Java\")) &#123;result.add(item);&#125;&#125;return result;&#125;使用Stream操作的方案。过程：List -&gt; Filter -&gt; List12345public List&lt;Item&gt; getItems() &#123;return items.stream().filter(item -&gt; item.getTag().equals(\"Java\")).collect(Collectors.toList());&#125;分组过程：List -&gt; Stream -&gt; Map&lt;String, ?&gt;1234public Map&lt;String, List&lt;Item&gt;&gt; groupByTag() &#123;return items.stream().collect(Collectors.groupingBy(Item::getTag));&#125;排序123Collections.sort(items, (String a, String b) -&gt; b.compareTo(a));// 简写Collections.sort(items, (a, b) -&gt; b.compareTo(a));List&lt;?&gt;转为List&lt;?&gt;(获取每个List对象中的属性)过程：List&lt; Item&gt; -&gt; stream -&gt; List&lt; String&gt;1items.stream().map(Item::getTag).collect(Collectors.toList());list转为String(获取每个List对象中的属性,逗号分隔组成的字符串)过程：List&lt;?&gt; -&gt; stream -&gt; String12items.stream().map(Item::getTag).collect(Collectors.joining(\",\"));list统计总数过程：List&lt;?&gt; -&gt; stream -&gt; long12items.stream().count();list转为map过程：List&lt;?&gt; -&gt; stream -&gt; Map&lt;String, ?&gt;1234567return items.stream().collect(Collectors.toMap(Item::getId, item -&gt; item));// 使用Function接口中的一个默认方法代替，使整个方法更简洁优雅：return items.stream().collect(Collectors.toMap(Item::getId, Function.identity()));// 重复key的情况 这个方法可能报错（java.lang.IllegalStateException: Duplicate key）reuturn items.stream().collect(Collectors.toMap(Item::getTag, Function.identity()));// 使用后者覆盖前者来解决key重复问题。return items.stream().collect(Collectors.toMap(Item::getTag, Function.identity(), (key1, key2) -&gt; key2));循环1到1012IntStream.range(0, 10).forEach((index) -&gt; &#123; &#125;);reduce具体用法参考这里计算总金额12BigDecimal sum = items.stream().map(Item::getPrice).reduce(BigDecimal::add).get();reduce默认返回的是Optional类型，使用初始值的reduce，因为提供了初始值，所以返回值不再是Optional12.reduce(0, (a, b) -&gt; a + b);reduce高级用法代码比较难看，其实可以使用.map + 简单的reduce替代Array 转 StreamArray和Map是没有流方法（.stream()）的,但是12Arrays.stream(results)Map 转 StreamArray和Map是没有流方法（.stream()）的,但是1234itemsMap.entrySet().stream()itemsMap.keySet().stream()itemsMap.valueSet().stream()过滤Map过程：Map -&gt; Stream -&gt; Filter -&gt; String12345result = itemsMap.entrySet().stream().filter(map -&gt; \"aws.amazon.com\".equals(map.getValue())).map(map -&gt; map.getValue()).collect(Collectors.joining());","categories":[{"name":"后端","slug":"后端","permalink":"https://cejasonwoo.github.io/categories/后端/"}],"tags":[{"name":"Java","slug":"Java","permalink":"https://cejasonwoo.github.io/tags/Java/"}]},{"title":"Test","slug":"test","date":"2017-10-22T15:01:21.000Z","updated":"2019-12-22T07:44:50.800Z","comments":true,"path":"2017/10/22/test/","link":"","permalink":"https://cejasonwoo.github.io/2017/10/22/test/","excerpt":"","text":"Title12Welcome to my blog.Testwelcome!中文中文测试h2h3h4h5h6","categories":[{"name":"Funny","slug":"Funny","permalink":"https://cejasonwoo.github.io/categories/Funny/"}],"tags":[{"name":"Java","slug":"Java","permalink":"https://cejasonwoo.github.io/tags/Java/"},{"name":"JavaScript","slug":"JavaScript","permalink":"https://cejasonwoo.github.io/tags/JavaScript/"},{"name":"Mac","slug":"Mac","permalink":"https://cejasonwoo.github.io/tags/Mac/"},{"name":"Linux","slug":"Linux","permalink":"https://cejasonwoo.github.io/tags/Linux/"},{"name":"tag1","slug":"tag1","permalink":"https://cejasonwoo.github.io/tags/tag1/"},{"name":"tag2","slug":"tag2","permalink":"https://cejasonwoo.github.io/tags/tag2/"},{"name":"设计模式","slug":"设计模式","permalink":"https://cejasonwoo.github.io/tags/设计模式/"},{"name":"算法","slug":"算法","permalink":"https://cejasonwoo.github.io/tags/算法/"}]},{"title":"Hello World","slug":"hello-world","date":"2017-10-22T14:20:36.319Z","updated":"2019-12-21T13:12:49.550Z","comments":true,"path":"2017/10/22/hello-world/","link":"","permalink":"https://cejasonwoo.github.io/2017/10/22/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.Quick StartCreate a new post1$ hexo new \"My New Post\"More info: WritingRun server1$ hexo serverMore info: ServerGenerate static files1$ hexo generateMore info: GeneratingDeploy to remote sites1$ hexo deployMore info: Deployment","categories":[],"tags":[]}]}